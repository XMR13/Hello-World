1. Buatlah program yang menghitung jarak bola yang jatuh dari sebuah gedung! (asumsikan bahwa gaya yang bekerja pada bola hanya gaya gravitasi)
rumus jarak jatuh = gravitasi * waktu^2 /2

#include "io.h"
#include <iostream>
#include <cmath>
#include <limits>

void ignoreLine();
double askTinggiAwal();
void calculateheight();


int main()
{
	calculateheight();
	

}

void ignoreLine()
{

	std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

double askTinggiAwal()
{
	while (true)
	{
		std::cout << "masukkan tinggi awal gedung tersebut? ";
		double tinggiAwal{};
		std::cin >> tinggiAwal;

		if (tinggiAwal < 0.0)
		{
			std::cout << "maaf silakan ulang kembali\n";

		}

		else if (tinggiAwal == 0.0)
		{

			return 0.0;
		}

		else if (std::cin.fail())
		{

			std::cin.clear();
			ignoreLine();
		}
		else
			return tinggiAwal;


	}
}





void calculateheight()
{
	using constant::gravity;
	double tinggiAwal = askTinggiAwal();
	int time{};
	double tinggiSekarang = tinggiAwal - gravity * ((time * time )/ 2);

	while (tinggiSekarang > 0)
	{

		std::cout << "tinggi bola dari tanah setelah " << time << " sekon adalah " << tinggiSekarang << std::endl;
		++time;
		tinggiSekarang = tinggiAwal - gravity * time * time / 2;
	}

	if (tinggiSekarang < 0)
	{
		std::cout << "selamat anda sudah mencapai tanah\n";
		
	}
	

	
}


2. Buatlah program yang menentukan apakah angka yang akan dijadikan argumen suatu fungsi merupakan angka prima atau tidak (gunakan loop untuk membuat fungsi tersebut)
#include <iostream>
#include <cassert>

bool isPrime(int x)
{
    int divisors{ 1 }; // the number of even divisors we've encountered.  We start at 1 since everything is divisible by 1.
    for (int test{ 2 }; test <= x; ++test) // test every divisor between 2 and x
    {
        if (x % test == 0) // if x is evenly divisible, increment divisors
            ++divisors;
    }

    return (divisors == 2); // if we only encountered 2 divisors (1 and the number itself) then x must be prime
}

int main()
{
    assert(!isPrime(0));
    assert(!isPrime(1));
    assert(isPrime(2));
    assert(isPrime(3));
    assert(!isPrime(4));
    assert(isPrime(5));
    assert(isPrime(7));
    assert(!isPrime(9));
    assert(isPrime(11));
    assert(isPrime(13));
    assert(!isPrime(15));
    assert(!isPrime(16));
    assert(isPrime(17));
    assert(isPrime(19));
    assert(isPrime(97));
    assert(!isPrime(99));
    assert(!isPrime(99));
    assert(isPrime(13417));

    std::cout << "Success!";

    return 0;
}
